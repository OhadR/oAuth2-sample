<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
							http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
						http://www.springframework.org/schema/context
							http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/security
							http://www.springframework.org/schema/security/spring-security-3.1.xsd
						http://www.springframework.org/schema/security/oauth2
							http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
						http://www.springframework.org/schema/mvc
							http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
						">

    <context:component-scan base-package="com.ohadr" />

	<context:annotation-config />
    <mvc:annotation-driven />
    <mvc:default-servlet-handler />


	<context:property-placeholder 
		ignore-resource-not-found="true" 
		system-properties-mode="OVERRIDE"
		location="classpath*:com.ohadr.authentication.properties,classpath*:oauth_provider.properties,classpath*:system.properties" />

    <security:http pattern="/login/**" security="none" />
    <security:http pattern="/forgotPasswordPage" security="none" />
    <security:http pattern="/forgotPassword" security="none" />
    <security:http pattern="/createAccountPage" security="none" />
    <security:http pattern="/createAccount" security="none" />

    
    <!-- Protect the /oauth/token url to allow only registered clients -->
    <!-- this statement enables the access to /oauth/token. without it we get "cannot access" -->
    <security:http pattern="/oauth/token"  authentication-manager-ref="clientAuthenticationManager">
        <security:intercept-url pattern="/oauth/token" access="ROLE_CLIENT" requires-channel="https"/>
        <security:anonymous enabled="false" />
        <security:http-basic />

        <!-- security:custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER" /-->
        <!-- security:access-denied-handler ref="oauthAccessDeniedHandler" /-->
    </security:http>



    <security:http auto-config="true" authentication-manager-ref="usersAuthManager">
		<security:intercept-url pattern="/publicKey" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <security:intercept-url pattern="/oauth/**"	access="ROLE_USER"  requires-channel="https" />
		<security:intercept-url pattern="/**" access="ROLE_ADMIN"   requires-channel="https" />

		<security:form-login 
			login-page="/login/login.htm" 
			authentication-success-handler-ref="authenticationSuccessHandler"
			authentication-failure-url="/login/login.htm?login_error=1" />


        <security:anonymous enabled="false"/>

        <!-- >security:custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER" /-->
        <!-- security:access-denied-handler ref="oauthAccessDeniedHandler" /-->

		<security:remember-me
			data-source-ref="dataSource"
			user-service-ref="userDetailsService"/>
			
	</security:http>
    


	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

    <security:authentication-manager alias="usersAuthManager">
        <security:authentication-provider user-service-ref="userDetailsService"/>
	</security:authentication-manager>

    <security:user-service id="userDetailsService">
				<security:user name="user@ohadr.com" password="uripass" authorities="ROLE_USER" />
				<security:user name="demo@ohadr.com" password="demo" authorities="ROLE_USER" />
    </security:user-service>



	<!-- example for encoding the passwords; we keep them here encoded. the password is 'ohadr' encoded: >
	<security:authentication-manager alias="usersAuthManager">
		<security:authentication-provider>
			<security:password-encoder hash="sha" />
			<security:user-service>
				<security:user name="ohadr@ohadr.com"
					password="c602cf34f3d3d37af9456daf7da4d210f6dc6662" authorities="ROLE_USER" />
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager-->

	<!-- OAuth2 Configuration -->
	<oauth:authorization-server
		client-details-service-ref="clientDetails" 
		token-services-ref="myAuthorizationServerTokenServices"
		user-approval-handler-ref="automaticUserApprovalHandler">
		<oauth:authorization-code />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password />
	</oauth:authorization-server>

	<security:authentication-manager id="clientAuthenticationManager">
		<security:authentication-provider user-service-ref="clientDetailsUserService" />
	</security:authentication-manager>

	<bean id="clientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails" />
	</bean>

	<oauth:client-details-service id="clientDetails">
		<oauth:client client-id="${com.ohadr.oauth2.client.name}"
			secret="${com.ohadr.oauth2.client.secret}" 
			scope="read,write,trust"
			authorized-grant-types="authorization_code,refresh_token" 
			authorities="ROLE_CLIENT"/>
	</oauth:client-details-service>
	

	<!-- data-source (for the remember me feature) -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="com.jamonapi.proxy.JAMonDriver"/>
        <property name="jdbcUrl"
                  value="jdbc:jamon:mysql://${com.ohadr.oauth2.db.host}:${com.ohadr.oauth2.db.port}/${com.ohadr.oauth2.db.schema}?jamonrealdriver=org.gjt.mm.mysql.Driver;useUnicode=true&amp;characterEncoding=utf-8"/>
        <property name="user" value="${com.ohadr.oauth2.db.username}"/>
        <property name="password" value="${com.ohadr.oauth2.db.password}"/>
        <property name="acquireIncrement" value="1"/>
        <property name="idleConnectionTestPeriod" value="100"/>
        <property name="maxPoolSize" value="10"/>
        <property name="maxStatements" value="5"/>
        <property name="minPoolSize" value="5"/>
    </bean>
    
    <bean class="com.ohadr.oauth_srv.mocks.OAuthRepositoryMock" />

	<bean id="passwordEncoder" 	class="org.springframework.security.authentication.encoding.ShaPasswordEncoder">
		<constructor-arg value="256"/>
	</bean>


</beans>